#!/usr/bin/env bash

# Copyright (c) 2024-08-01 xulinchun <xulinchun0806@outlook.com>
#
# This file is part of LMD.
#
# LMD is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# LMD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LMD.  If not, see <http://www.gnu.org/licenses/>.
#==============================================================================

export TMOUT=0
umask 022

RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
RESET='\033[0m'

oldpwd=$(pwd)

os_name=$(awk -F '=' '/^NAME/{print $2}' /etc/os-release | tr -d '"' | awk '{$1=$1};1')
os_architecture=$(uname -m)

AllowScriptDependencies() {

    case "${os_name}" in
        "Ubuntu")
            apt-get update 
            apt-get install -y curl
            dpkg -i ${oldpwd}/install-denpend/files/sshpass_${os_architecture}.deb
            ;;
        "EulerOS")
            yum install -y curl
            rpm -ivh ${oldpwd}/install-denpend/files/sshpass_${os_architecture}.rpm
            ;;
        *)
            echo -e "${RED} Unsupported OS: ${os_name} ${RESET}"
            exit 1
            ;;
    esac

    # 安装 miniconda
    condaURL="https://mirror.nju.edu.cn/anaconda/miniconda/Miniconda3-py310_24.5.0-0-Linux-${os_architecture}.sh"
    condaName="/tmp/miniconda.sh"
    download "${condaURL}" "${condaName}"
    yes|bash /tmp/miniconda.sh -b -u -p /tmp/lmd/miniconda

    # 安装 ansible
    /tmp/lmd/miniconda/bin/python3.10 -m pip config set global.index-url https://mirror.nju.edu.cn/pypi/web/simple
    /tmp/lmd/miniconda/bin/python3.10 -m pip install --upgrade --no-cache-dir ansible
}


ScriptConfigurationDependency() {
    if [ ! -f ./inventory ]; then
        echo "inventory file not found"
        exit 1
    fi

    if [ ! -f ./ansible.cfg ]; then
        echo "ansible.cfg file not found"
        exit 1
    fi
}

download() {
    set +e

    local max_retries=10
    local retry_delay=10
    local url=$1
    local path=$2

    for ((i=1; i<=max_retries; i++)); do
        echo "Attempt $i of $max_retries at $(date)..."
        curl --max-time 30 -fsSL -o "${path}" "${url}"
        if [[ $? -eq 0 ]]; then
            return 0
        else
            echo "Download failed with error code $?. Retrying in ${retry_delay} seconds..."
            sleep ${retry_delay}
        fi
    done

    echo "All attempts failed. Exiting."
    return 1
}


confirm_action() {
    echo -e "${YELLOW}是否已经阅读过 README.md 文件？[yY/nN] ${RESET}"
    read choice
    case "${choice}" in
        y|Y )
            return 0
            ;;
        * )
            echo -e "${RED}请注意在执行该脚本之前，请先阅读 README.md 文件 ${RESET}"
            return 1
            ;;
    esac
}

install() {
    ScriptConfigurationDependency
    AllowScriptDependencies
    /tmp/lmd/miniconda/bin/python3.10 -m pip --version || {
        echo -e "${RED}pip 不可用，请检查 Miniconda 安装。${RESET}"
        exit 1
    }
    /tmp/lmd/miniconda/bin/ansible-playbook lmd-install.yaml || {
        echo -e "${RED}安装失败，请检查日志。${RESET}"
        exit 1
    }
    /tmp/lmd/miniconda/bin/ansible --version || {
        echo -e "${RED}Ansible 安装验证失败。${RESET}"
        exit 1
    }
}

uninstall() {
    ScriptConfigurationDependency
    AllowScriptDependencies
    /tmp/lmd/miniconda/bin/ansible-playbook lmd-uninstall.yaml || {
        echo -e "${RED}卸载失败，请检查日志。${RESET}"
        exit 1
    }
}

clear() {

    case "${os_name}" in
        "Ubuntu")
            dpkg -P sshpass_${os_architecture}.deb
            ;;
        "EulerOS")
            rpm -e sshpass_${os_architecture}.rpm
            ;;
        *)
            echo -e "${RED} Unsupported OS: ${os_name} ${RESET}"
            exit 1
            ;;
    esac

    if [ -d /tmp/lmd ]; then
        rm -rf /tmp/lmd
    fi

    rm -rf ./*

    echo -e "${GREEN}LMD clear success!${RESET}"
}

main() {
    case "$1" in
        install)
            confirm_action && install
            ;;
        uninstall)
            confirm_action && uninstall
            ;;
        clear)
            confirm_action && clear
            ;;
        *)
            echo -e "${RED}请注意在执行该脚本之前，请先阅读 README.md 文件 ${RESET}\n"
            echo -e "${RED}Usage: $0 {install|uninstall|clear} ${RESET}"
            exit 1
            ;;
    esac
}

main "$@" || exit 1