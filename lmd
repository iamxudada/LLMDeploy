#!/usr/bin/env bash

# Copyright (c) 2024-08-01 xulinchun <xulinchun0806@outlook.com>
#
# This file is part of LMD.
#
# LMD is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# LMD is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with LMD.  If not, see <http://www.gnu.org/licenses/>.
#==============================================================================

export TMOUT=0
umask 022

RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
RESET='\033[0m'

log_info() {
    printf "${GREEN}[INFO]${RESET} %s\n" "$1"
}

log_warn() {
    printf "${YELLOW}[WARN]${RESET} %s\n" "$1"
}

log_error() {
    printf "${RED}[ERROR]${RESET} %s\n" "$1" >&2
}

readonly OLDPWD=$(pwd)
readonly OS_NAME=$(awk -F '=' '/^NAME/{print $2}' /etc/os-release | tr -d '"' | awk '{$1=$1};1')
readonly OS_ARCH=$(uname -m)
readonly CONDA_PATH="/tmp/lmd/miniconda"

check_cmd() {
    if ! "$@"; then
        log_error "Command failed: $*"
        return 1
    fi
}

cleanup() {
    if [ -d "/tmp/lmd" ]; then
        rm -rf "/tmp/lmd"
    fi
    if [ -f "/tmp/miniconda.sh" ]; then
        rm -f "/tmp/miniconda.sh"
    fi
}

trap cleanup EXIT

AllowScriptDependencies() {
    log_info "Installing script dependencies..."
    
    case "${OS_NAME}" in
        "Ubuntu")
            check_cmd apt-get update
            check_cmd apt-get install -y curl
            check_cmd dpkg -i "${OLDPWD}/install-denpend/files/sshpass_${OS_ARCH}.deb"
            ;;
        "EulerOS")
            check_cmd yum install -y curl
            check_cmd rpm -ivh "${OLDPWD}/install-denpend/files/sshpass_${OS_ARCH}.rpm"
            ;;
        *)
            log_error "Unsupported OS: ${OS_NAME}"
            exit 1
            ;;
    esac

    local conda_url="https://mirror.nju.edu.cn/anaconda/miniconda/Miniconda3-py310_24.5.0-0-Linux-${OS_ARCH}.sh"
    local conda_installer="/tmp/miniconda.sh"
    
    log_info "Downloading Miniconda..."
    if ! download "${conda_url}" "${conda_installer}"; then
        log_error "Failed to download Miniconda"
        exit 1
    fi

    log_info "Installing Miniconda..."
    if ! bash "${conda_installer}" -b -u -p "${CONDA_PATH}"; then
        log_error "Failed to install Miniconda"
        exit 1
    fi

    log_info "Installing Ansible..."
    check_cmd "${CONDA_PATH}/bin/python3.10" -m pip config set global.index-url https://mirror.nju.edu.cn/pypi/web/simple
    check_cmd "${CONDA_PATH}/bin/python3.10" -m pip install --upgrade --no-cache-dir ansible
}

ScriptConfigurationDependency() {
    local required_files=("inventory" "ansible.cfg")
    
    for file in "${required_files[@]}"; do
        if [ ! -f "./${file}" ]; then
            log_error "${file} file not found"
            exit 1
        fi
    done
}

download() {
    set +e
    local url="$1"
    local path="$2"
    local max_retries=10
    local retry_delay=10
    local attempt=1

    while [ $attempt -le $max_retries ]; do
        log_info "Download attempt $attempt of $max_retries..."
        if curl --max-time 30 -fsSL -o "${path}" "${url}"; then
            log_info "Download successful"
            set -e
            return 0
        fi
        
        log_warn "Download failed. Retrying in ${retry_delay} seconds..."
        sleep "${retry_delay}"
        ((attempt++))
    done

    log_error "Download failed after ${max_retries} attempts"
    set -e
    return 1
}

confirm_action() {
    while true; do
        log_warn "Have you read the README.md file? [y/N]"
        read -r choice
        case "${choice}" in
            [yY])
                return 0
                ;;
            [nN]|"")
                log_error "Please read README.md before proceeding"
                return 1
                ;;
            *)
                log_warn "Invalid input. Please enter 'y' or 'n'"
                ;;
        esac
    done
}

install() {
    log_info "Starting installation..."
    ScriptConfigurationDependency
    AllowScriptDependencies

    if ! "${CONDA_PATH}/bin/python3.10" -m pip --version; then
        log_error "pip is not available. Please check Miniconda installation"
        exit 1
    fi

    if ! "${CONDA_PATH}/bin/ansible" --version; then
        log_error "Ansible installation verification failed"
        exit 1
    fi

    log_info "Running installation playbook..."
    if ! "${CONDA_PATH}/bin/ansible-playbook" lmd-install.yaml; then
        log_error "Installation failed. Please check logs"
        exit 1
    fi

    log_info "Installation completed successfully"
}

uninstall() {
    log_info "Starting uninstallation..."
    ScriptConfigurationDependency
    AllowScriptDependencies

    log_info "Running uninstallation playbook..."
    if ! "${CONDA_PATH}/bin/ansible-playbook" lmd-uninstall.yaml; then
        log_error "Uninstallation failed. Please check logs"
        exit 1
    fi

    log_info "Uninstallation completed successfully"
}

clean() {
    log_info "Starting cleanup..."

    case "${OS_NAME}" in
        "Ubuntu")
            dpkg -P "sshpass_${OS_ARCH}" 2>/dev/null || log_warn "Failed to remove sshpass package"
            ;;
        "EulerOS")
            rpm -e "sshpass" 2>/dev/null || log_warn "Failed to remove sshpass package"
            ;;
        *)
            log_error "Unsupported OS: ${OS_NAME}"
            exit 1
            ;;
    esac

    if [ -d "/tmp/lmd" ]; then
        rm -rf "/tmp/lmd"
    fi

    log_info "Cleanup completed successfully"
}

main() {
    case "$1" in
        install)
            confirm_action && install
            ;;
        uninstall)
            confirm_action && uninstall
            ;;
        clean)
            confirm_action && clean
            ;;
        *)
            log_error "Usage: $0 {install|uninstall|clear}"
            log_error "Please read README.md before proceeding"
            exit 1
            ;;
    esac
}

main "$@" || exit 1